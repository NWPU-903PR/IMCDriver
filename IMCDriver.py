#***********************************
# Run the command 'python test_with_LOOCV.py' in the Terminal to implement IMC with LOOCV test method.
# Or directly run this file in the Pycharm IDE.

# Note that, before running this script, you should run the script of data_preprocess.py to prepare the data for IMC.
# We stronger suggest that the names of files and subfolders generated by the script of data_preprocess.py not to be changed.
# Unless the names of changed files or subfolders are also changed identically in this script.

# This may take tens of minutes to finish all the samples.
# Exact time mainly depends on your computer and the number of samples in your dataset.
# The processing time that each sample takes will be printed to facilitate the estimation of running time.
#***********************************

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import MinMaxScaler
import time

# IMC
# inputs: P, X, Y, r, epoch
# The size of matrix P is ns*ng
# The size of matrix X is ns*fs
# The size of matrix Y is ng*fg
# outputs: matrix Z with size of fs*fg
def IMC(P,X,Y,r,epoch=1500):
    fs=X.shape[1]
    fg=Y.shape[1]
    W=np.random.random((fs,r))
    H=np.random.random((fg,r))
    k=1
    while k<epoch:
        #H = H. * (Y'*A' * (X * W))./ (Y'*(Y*H)*(W' * (X')*(X*W))+H);
        H = H * ( np.dot(np.dot(Y.T,P.T) , np.dot(X,W) ) ) / ( np.dot(np.dot(Y.T, np.dot(Y,H)), np.dot(np.dot(W.T,X.T),np.dot(X,W)) )  +H)
        #W=W.* (X'*A*(Y*H))./(X' * (X * W) * (H'*(Y') * (Y * H))+W);
        W = W * ( np.dot(np.dot(X.T,P),np.dot(Y,H)) ) / ( np.dot( np.dot(X.T,np.dot(X,W)) , np.dot( np.dot(H.T,Y.T),np.dot(Y,H) ) )   +W)
        k=k+1
        #print(0.5*math.pow(np.linalg.norm(P-np.dot(X,np.dot(W,np.dot(H.T,Y.T))),'fro'),0.5))
    return np.dot(W,H.T)

def cal_pca_minmaxstd(df1,pca_n_comp):
    df1=np.array(df1)
    pca = PCA(n_components=pca_n_comp)
    dfpca = pca.fit_transform(df1)
    minMax = MinMaxScaler()
    return minMax.fit_transform(dfpca)

# Apply the leave-one-out cross-validation (LOOCV) test method
# to score the mutated genes for each sample in a cancer dataset.
# The predicted file is saved in './newresults/%s/pre.txt' % cancer_folder
# The gold standard file is saved in './newresults/%s/truth.txt' % cancer_folder
def personalized_validating_with_LOOCV(cancer_folder):
    P_orig=pd.read_table(filepath_or_buffer='./data/%s/P_filtered.txt' % cancer_folder,header=0,index_col=0,sep='\t')
    Y_orig = pd.read_table(filepath_or_buffer='./data/%s/sample_similarity/samp_mut_profile_sim.txt' % cancer_folder, header=None,index_col=None, sep='\t')

    valid_samp_lst=P_orig.columns.values.tolist()
    valid_samp_id_lst = [i + 1 for i in np.arange(0,P_orig.shape[1])]

    X=pd.read_table(filepath_or_buffer='./data/%s/mut_similarity/mut_sim.txt' % cancer_folder,header=None,index_col=None,sep='\t')
    X=np.array(X)

    Xpca = cal_pca_minmaxstd(X, 100)
    Y_origpca = cal_pca_minmaxstd(Y_orig, 100)

    pre_df=pd.DataFrame([],index=P_orig.index)

    time_start=time.time()
    for i in np.arange(0, len(valid_samp_lst)):
        s=valid_samp_lst[i]
        id=valid_samp_id_lst[i]

        P = P_orig.drop([s], axis=1, inplace=False)
        P = np.array(P)

        Ypca = np.delete(Y_origpca,[id-1],axis=0)
        Z=IMC(P.T,Ypca,Xpca,100,500)

        Yi=Y_origpca[id-1,:]
        pre_i=np.dot(np.dot(Xpca,Z.T),Yi)
        pre_df[s] = pre_i

        time_end = time.time()
        print('Num:%d. Sample: %s done----time cost: %d s' % (i+1,s, time_end - time_start))
    pre_truth=P_orig.loc[:,valid_samp_lst]
    pre_df.to_csv(path_or_buf='./data/%s/results/pre.txt' % cancer_folder, sep='\t', header=True,index=True)
    pre_truth.to_csv(path_or_buf='./data/%s/results/truth.txt' % cancer_folder, sep='\t',header=True,index=True)



# The cancer_folder represents the folder name of your cancer dataset, such as 'Example' or 'BRCA'.
# You can change it to fit your data.
cancer_folder='BRCA'
personalized_validating_with_LOOCV(cancer_folder)
